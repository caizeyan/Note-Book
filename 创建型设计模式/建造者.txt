作用：将复杂对象的构造与其表示分开，这样相同的构造过程可以有不同的表示。

适用性：
	1.创建复杂对象的算法应该独立于该对象的部件以及它们如何组成
	2.构造过程允许被构造对象的不同表示

合作：
	1.客户端创建director对象并使用所需的builder对象
	2.Director通知builder合适构建产品某个部分。
	3.Builder处理Director的请求并向产品添加部件。
	4.客户端从builder中获取产品

利弊：
	1.它允许你改变产品的内部表现。Builder对象提供了构建产品的抽象接口且隐藏了组装方式（不是组装顺序，顺序由Director控制）。定义一个新的builder即可改变内部表现。
	2.将构建和表现代码隔离。Builder封装了复杂对象的表现以及构造过程。
	3.更好的控制构建过程。Builder在Director下一步一步构建对象。

相关设计模式：
	1.抽象工厂与建筑者相似都可以构造复杂对象。抽象工厂专注于返回一个对象实例，建造者专注于返回一个组装好的对象。
	2.Composite是建造者经常构建的对象。

职责：
	Builder：为创建Product组件提供抽象接口
	ConcreteBuilder：1.通过实现Builder接口，构建和集合Product组件。
		             2.定义并跟踪它创建的Product表现。
		             3.为检索Product提供接口
	Director:构建Product通过Builder接口
	Product: 表示被构建的复杂对象。