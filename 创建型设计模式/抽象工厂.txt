作用：为生成一类或相关的object提供接口并隐藏具体的类

适用性：	
	1.系统独立于其产品如何创建、组成和表现。
	2.系统配置于多个家族产品中一个
	3.家族产品被设计为统一应用且你需要强制约束。
	4.你想为产品提供目录并且你只想提供他们的接口而不是他们的实现。

合作：
	1.通常在运行中只有一个具体工厂且生成固定的产品，想要不同的产品需要切换工厂
	2.抽象工厂将产品生成推迟到子类

利弊：
     利：
	1.隔绝具体的类，客户端不会出现产品中具体的子类。
	2.改变产品家族更加容易，通过修改具体工厂即可。
	3.促进产品之间的一致性，通过工厂强制家族产品一起应用
     弊：
	1.添加新的产品类型变得困难，需要在每个工厂中添加新的接口。

相关设计模式：
	1.抽象工厂经常用工厂模式生成，有时也可以用原型模式实现。
	2.一个工厂实例通常为单例

职责：
	AbstractFactor：声明创建抽象Product的接口。
	ConcretFactor：实现接口。
	AbstractProduct：声明接口给该类型的object。
	Product：实现AbstractProduct接口。